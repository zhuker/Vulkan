#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

struct HitPy {
    vec3  point;// The point in 3D space that the ray hit.
    uint  valid;
    vec3  normal;// The normalized geometry normal
    float distance;// The distance measured from the ray origin to this hit.
    uint  geomID;// The geometry ID of object in the scene (ignore for now)
    uint  instID;// The instance ID of the object in the scene
    uint  primID;// The index of the primitive of the mesh hit
    uint  lidar_id;// The lidar id of the ray
    vec4 padding;
};

layout(binding = 3, set = 0, std140) buffer Pos {
    HitPy hits[];
} ololo;

layout(location = 0) rayPayloadNV HitPy hit;

void main()
{
//    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin =  vec4(0.5, 0.5, -1.0, 0.0);
    vec4 direction = vec4(0.0, 0.0, 1.0, 0.0);

    //    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    //    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    //    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz / target.w), 0);

    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    //    const uint idx = gl_LaunchIDNV.x * gl_LaunchIDNV.y;
    //    ololo.hits[gl_LaunchIDNV.x * gl_LaunchIDNV.y].valid = 0;
    traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
    //    if (hit.valid) {
    ololo.hits[gl_LaunchIDNV.x * gl_LaunchIDNV.y] = hit;
    //    ololo.hits[gl_LaunchIDNV.x * gl_LaunchIDNV.y].valid = hit.valid;
    //    ololo.hits[gl_LaunchIDNV.x * gl_LaunchIDNV.y].distance = hit.distance;
    //    }
    //    const float x = float(ololo.pixels[0])/ 84.42f;
    //	values[1] = 44;
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hit.valid, hit.valid, hit.valid, 0.0));
}
